configurations.all {
    resolutionStrategy.cacheDynamicVersionsFor 10, 'minutes'
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 4, 'hours'
}

configurations.all {
    resolutionStrategy.dependencySubstitution.eachModule { ModuleDependencySubstitution details ->
        if (details.requested.group == 'org.gradle') {
            details.useVersion '1.4'
        }
    }
}

configurations.all {
    resolutionStrategy.dependencySubstitution.eachModule { ModuleDependencySubstitution details ->
        if (details.requested.version == 'default') {
            def version = findDefaultVersionInCatalog(details.requested.group, details.requested.module)
            details.useVersion version
        }
    }
}

def findDefaultVersionInCatalog(String group, String name) {
    //some custom logic that resolves the default version into a specific version
    "1.0"
}

configurations.all {
    resolutionStrategy.dependencySubstitution.eachModule { ModuleDependencySubstitution details ->
        if (details.requested.group == 'org.software' && details.requested.module == 'some-library' && details.requested.version == '1.2') {
            //prefer different version which contains some necessary fixes
            details.useVersion '1.2.1'
        }
    }
}

configurations.all {
    resolutionStrategy.dependencySubstitution.eachModule { ModuleDependencySubstitution details ->
        if (details.requested.module == 'groovy-all') {
            //prefer 'groovy' over 'groovy-all':
            details.useTarget group: details.requested.group, name: 'groovy', version: details.requested.version
        }
        if (details.requested.module == 'log4j') {
            //prefer 'log4j-over-slf4j' over 'log4j', with fixed version:
            details.useTarget "org.slf4j:log4j-over-slf4j:1.7.10"
        }
    }
}
