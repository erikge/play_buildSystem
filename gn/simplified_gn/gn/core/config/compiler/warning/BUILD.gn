
if (is_posix) {
  import("//gn/core/config/gcc/env.gni")
}

# default_warning_flags collects all warning flags that are used by default.
# This is in a variable instead of a config so that it can be used in
# both chromium_code and no_chromium_code.  This way these flags are guaranteed
# to appear on the compile command line after -Wall.

default_warning_flags = []
default_warning_flags_cc = []
if (is_win) {
  default_warning_flags += [
    # Treat warnings as errors.
    "/WX",

    # Warnings permanently disabled:

    # C4127: conditional expression is constant
    # This warning can in theory catch dead code and other problems, but
    # triggers in far too many desirable cases where the conditional
    # expression is either set by macros or corresponds some legitimate
    # compile-time constant expression (due to constant template args,
    # conditionals comparing the sizes of different types, etc.).  Some of
    # these can be worked around, but it's not worth it.
    "/wd4127",

    # C4251: 'identifier' : class 'type' needs to have dll-interface to be
    #        used by clients of class 'type2'
    # This is necessary for the shared library build.
    "/wd4251",

    # C4351: new behavior: elements of array 'array' will be default
    #        initialized
    # This is a silly "warning" that basically just alerts you that the
    # compiler is going to actually follow the language spec like it's
    # supposed to, instead of not following it like old buggy versions did.
    # There's absolutely no reason to turn this on.
    "/wd4351",

    # C4355: 'this': used in base member initializer list
    # It's commonly useful to pass |this| to objects in a class' initializer
    # list.  While this warning can catch real bugs, most of the time the
    # constructors in question don't attempt to call methods on the passed-in
    # pointer (until later), and annotating every legit usage of this is
    # simply more hassle than the warning is worth.
    "/wd4355",

    # C4503: 'identifier': decorated name length exceeded, name was
    #        truncated
    # This only means that some long error messages might have truncated
    # identifiers in the presence of lots of templates.  It has no effect on
    # program correctness and there's no real reason to waste time trying to
    # prevent it.
    "/wd4503",

    # Warning C4589 says: "Constructor of abstract class ignores
    # initializer for virtual base class." Disable this warning because it
    # is flaky in VS 2015 RTM. It triggers on compiler generated
    # copy-constructors in some cases.
    "/wd4589",

    # C4611: interaction between 'function' and C++ object destruction is
    #        non-portable
    # This warning is unavoidable when using e.g. setjmp/longjmp.  MSDN
    # suggests using exceptions instead of setjmp/longjmp for C++, but
    # Chromium code compiles without exception support.  We therefore have to
    # use setjmp/longjmp for e.g. JPEG decode error handling, which means we
    # have to turn off this warning (and be careful about how object
    # destruction happens in such cases).
    "/wd4611",

    # Warnings to evaluate and possibly fix/reenable later:

    "/wd4100",  # Unreferenced formal function parameter.
    "/wd4121",  # Alignment of a member was sensitive to packing.
    "/wd4244",  # Conversion: possible loss of data.
    "/wd4481",  # Nonstandard extension: override specifier.
    "/wd4505",  # Unreferenced local function has been removed.
    "/wd4510",  # Default constructor could not be generated.
    "/wd4512",  # Assignment operator could not be generated.
    "/wd4610",  # Class can never be instantiated, constructor required.
    "/wd4995",  # 'X': name was marked as #pragma deprecated
    "/wd4996",  # Deprecated function warning.
  ]

  # VS xtree header file needs to be patched or 4702 (unreachable code
  # warning) is reported if _HAS_EXCEPTIONS=0. Disable the warning if xtree is
  # not patched.
  if (!msvs_xtree_patched &&
      exec_script("../../win_is_xtree_patched.py", [], "value") == 0) {
    default_warning_flags += [ "/wd4702" ]  # Unreachable code.
  }

  # Building with Clang on Windows is a work in progress and very
  # experimental. See crbug.com/82385.
  # Keep this in sync with the similar block in build/common.gypi
  if (is_clang) {
    default_warning_flags += [
      # TODO(hans): Make this list shorter eventually, http://crbug.com/504657
      "-Qunused-arguments",  # http://crbug.com/504658
      "-Wno-microsoft-enum-value",  # http://crbug.com/505296
      "-Wno-unknown-pragmas",  # http://crbug.com/505314
      "-Wno-unused-value",  # http://crbug.com/505318
    ]
  }
} else {
  # Common GCC warning setup.
  default_warning_flags += [
    # Enables.
    "-Wendif-labels",  # Weird old-style text after an #endif.
    "-Werror",  # Warnings as errors.

    # Disables.
    "-Wno-missing-field-initializers",  # "struct foo f = {0};"
    "-Wno-unused-parameter",  # Unused function parameters.
  ]

  if (is_mac) {
    default_warning_flags += [ "-Wnewline-eof" ]
  }

  if (gcc_version >= 48) {
    default_warning_flags_cc += [
      # See comment for -Wno-c++11-narrowing.
      "-Wno-narrowing",
    ]
    if (!is_clang) {
      default_warning_flags_cc += [
        # TODO(thakis): Remove, http://crbug.com/263960
        "-Wno-literal-suffix",
      ]
    }
  }

  # Suppress warnings about ABI changes on ARM (Clang doesn't give this
  # warning).
  if (current_cpu == "arm" && !is_clang) {
    default_warning_flags += [ "-Wno-psabi" ]
  }

  if (is_android) {
    # Disable any additional warnings enabled by the Android build system but
    # which chromium does not build cleanly with (when treating warning as
    # errors).
    default_warning_flags += [
      "-Wno-extra",
      "-Wno-ignored-qualifiers",
      "-Wno-type-limits",
    ]
    default_warning_flags_cc += [
      # Disabling c++0x-compat should be handled in WebKit, but
      # this currently doesn't work because gcc_version is not set
      # correctly when building with the Android build system.
      # TODO(torne): Fix this in WebKit.
      "-Wno-error=c++0x-compat",

      # Other things unrelated to -Wextra:
      "-Wno-non-virtual-dtor",
      "-Wno-sign-promo",
    ]
  }

  if (gcc_version >= 48) {
    # Don't warn about the "typedef 'foo' locally defined but not used"
    # for gcc 4.8.
    # TODO: remove this flag once all builds work. See crbug.com/227506
    default_warning_flags += [ "-Wno-unused-local-typedefs" ]
  }
}
if (is_clang) {
  default_warning_flags += [
    # This warns on using ints as initializers for floats in
    # initializer lists (e.g. |int a = f(); CGSize s = { a, a };|),
    # which happens in several places in chrome code. Not sure if
    # this is worth fixing.
    "-Wno-c++11-narrowing",

    # Don't die on dtoa code that uses a char as an array index.
    # This is required solely for base/third_party/dmg_fp/dtoa.cc.
    # TODO(brettw) move this to that project then!
    "-Wno-char-subscripts",

    # Warns on switches on enums that cover all enum values but
    # also contain a default: branch. Chrome is full of that.
    "-Wno-covered-switch-default",

    # Clang considers the `register` keyword as deprecated, but e.g.
    # code generated by flex (used in angle) contains that keyword.
    # http://crbug.com/255186
    "-Wno-deprecated-register",

    # TODO(thakis): This used to be implied by -Wno-unused-function,
    # which we no longer use. Check if it makes sense to remove
    # this as well. http://crbug.com/316352
    "-Wno-unneeded-internal-declaration",

  ]

  if (is_posix && !is_mac && !is_ios) {
    default_warning_flags += [
      # TODO(thakis): Remove, http://crbug.com/263960
      "-Wno-reserved-user-defined-literal",
    ]
  }
}

# chromium_code ---------------------------------------------------------------
#
# Toggles between higher and lower warnings for code that is
# part of project or third-party

config("higher_warning") {
  if (is_win) {
    cflags = [ "/W4" ]  # Warning level 4.
  } else {
    cflags = [
      "-Wall",

      # GCC turns on -Wsign-compare for C++ under -Wall, but clang doesn't,
      # so we specify it explicitly.
      # TODO(fischman): remove this if http://llvm.org/PR10448 obsoletes it.
      # http://code.google.com/p/chromium/issues/detail?id=90453
      "-Wsign-compare",
    ]

    # In Chromium code, we define __STDC_foo_MACROS in order to get the
    # C99 macros on Mac and Linux.
    defines = [
      "__STDC_CONSTANT_MACROS",
      "__STDC_FORMAT_MACROS",
    ]

    if (!is_debug &&
        (!is_linux || !is_clang || is_official_build)) {
      # _FORTIFY_SOURCE isn't really supported by Clang now, see
      # http://llvm.org/bugs/show_bug.cgi?id=16821.
      # It seems to work fine with Ubuntu 12 headers though, so use it in
      # official builds.
      #
      # Non-chromium code is not guaranteed to compile cleanly with
      # _FORTIFY_SOURCE. Also, fortified build may fail when optimizations are
      # disabled, so only do that for Release build.
      defines += [ "_FORTIFY_SOURCE=2" ]
    }
  }
  cflags += default_warning_flags
  cflags_cc = default_warning_flags_cc
}

config("lower_warning") {
  cflags = []
  cflags_cc = []
  defines = []

  if (is_win) {
    cflags += [
      "/W3",  # Warning level 3.
      "/wd4800",  # Disable warning when forcing value to bool.
      "/wd4267",  # TODO(jschuh): size_t to int.
      "/wd4996",  # Deprecated function warning.
    ]
    defines += [
      "_CRT_NONSTDC_NO_WARNINGS",
      "_CRT_NONSTDC_NO_DEPRECATE",
    ]
  }

  if (is_linux) {
    # Don't warn about ignoring the return value from e.g. close(). This is
    # off by default in some gccs but on by default in others. BSD systems do
    # not support this option, since they are usually using gcc 4.2.1, which
    # does not have this flag yet.
    cflags += [ "-Wno-unused-result" ]
  }

  if (is_clang) {
    cflags += [
      # TODO(thakis): Move this suppression into individual third-party
      # libraries as required. http://crbug.com/505316.
      "-Wno-unused-function",

      # Lots of third-party libraries have unused variables. Instead of
      # suppressing them individually, we just blanket suppress them here.
      "-Wno-unused-variable",
    ]
  }

  if (is_linux || is_android) {
    cflags += [
      # Don't warn about printf format problems. This is off by default in gcc
      # but on in Ubuntu's gcc(!).
      "-Wno-format",
    ]
    cflags_cc += [
      # Don't warn about hash_map in third-party code.
      "-Wno-deprecated",
    ]
  }

  cflags += default_warning_flags
  cflags_cc += default_warning_flags_cc
}

# Warnings ---------------------------------------------------------------------

# This will generate warnings when using Clang if code generates exit-time
# destructors, which will slow down closing the program.
# TODO(thakis): Make this a blacklist instead, http://crbug.com/101600
config("wexit_time_destructors") {
  # TODO: Enable on Windows too, http://crbug.com/404525
  if (is_clang && !is_win) {
    cflags = [ "-Wexit-time-destructors" ]
  }
}

# On Windows compiling on x64, VC will issue a warning when converting
# size_t to int because it will truncate the value. Our code should not have
# these warnings and one should use a static_cast or a checked_cast for the
# conversion depending on the case. However, a lot of code still needs to be
# fixed. Apply this config to such targets to disable the warning.
#
# Note that this can be applied regardless of platform and architecture to
# clean up the call sites. This will only apply the flag when necessary.
#
# TODO(jschuh): crbug.com/167187 fix this and delete this config.
config("no_size_t_to_int_warning") {
  if (is_win && current_cpu == "x64") {
    cflags = [ "/wd4267" ]
  }
}

# Some code presumes that pointers to structures/objects are compatible
# regardless of whether what they point to is already known to be valid.
# gcc 4.9 and earlier had no way of suppressing this warning without
# supressing the rest of them.  Here we centralize the identification of
# the gcc 4.9 toolchains.
config("no_incompatible_pointer_warnings") {
  cflags = []
  if (is_clang) {
    cflags += [ "-Wno-incompatible-pointer-types" ]
  } else if (current_cpu == "mipsel") {
    cflags += [ "-w" ]
  } else if (is_chromeos && current_cpu == "arm") {
    cflags += [ "-w" ]
  }
}

